// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from /Users/gali.k/IdeaProjects/products/framework/src/main/proto/user-segments-data.proto

package com.taboola.hackathon.frontend.kafka;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class UserSegmentsData implements Externalizable, Message<UserSegmentsData>
{

    public static Schema<UserSegmentsData> getSchema()
    {
        return SCHEMA;
    }

    public static UserSegmentsData getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final UserSegmentsData DEFAULT_INSTANCE = new UserSegmentsData();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String partnerName;
    String taboolaUserId;
    ByteString encodedValue;
    String feature;
    String monitoringLabel;
    List<Long> uddIds;
    List<Long> deletedUddIds;

    public UserSegmentsData()
    {
        
    }

    // getters and setters

    // partnerName

    public String getPartnerName()
    {
        return partnerName;
    }

    public UserSegmentsData setPartnerName(String partnerName)
    {
        this.partnerName = partnerName;
        return this;
    }

    // taboolaUserId

    public String getTaboolaUserId()
    {
        return taboolaUserId;
    }

    public UserSegmentsData setTaboolaUserId(String taboolaUserId)
    {
        this.taboolaUserId = taboolaUserId;
        return this;
    }

    // encodedValue

    public ByteString getEncodedValue()
    {
        return encodedValue;
    }

    public UserSegmentsData setEncodedValue(ByteString encodedValue)
    {
        this.encodedValue = encodedValue;
        return this;
    }

    // feature

    public String getFeature()
    {
        return feature;
    }

    public UserSegmentsData setFeature(String feature)
    {
        this.feature = feature;
        return this;
    }

    // monitoringLabel

    public String getMonitoringLabel()
    {
        return monitoringLabel;
    }

    public UserSegmentsData setMonitoringLabel(String monitoringLabel)
    {
        this.monitoringLabel = monitoringLabel;
        return this;
    }

    // uddIds

    public List<Long> getUddIdsList()
    {
        return uddIds;
    }

    public UserSegmentsData setUddIdsList(List<Long> uddIds)
    {
        this.uddIds = uddIds;
        return this;
    }

    // deletedUddIds

    public List<Long> getDeletedUddIdsList()
    {
        return deletedUddIds;
    }

    public UserSegmentsData setDeletedUddIdsList(List<Long> deletedUddIds)
    {
        this.deletedUddIds = deletedUddIds;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<UserSegmentsData> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<UserSegmentsData> SCHEMA = new Schema<UserSegmentsData>()
    {
        // schema methods

        public UserSegmentsData newMessage()
        {
            return new UserSegmentsData();
        }

        public Class<UserSegmentsData> typeClass()
        {
            return UserSegmentsData.class;
        }

        public String messageName()
        {
            return UserSegmentsData.class.getSimpleName();
        }

        public String messageFullName()
        {
            return UserSegmentsData.class.getName();
        }

        public boolean isInitialized(UserSegmentsData message)
        {
            return true;
        }

        public void mergeFrom(Input input, UserSegmentsData message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.partnerName = input.readString();
                        break;
                    case 2:
                        message.taboolaUserId = input.readString();
                        break;
                    case 3:
                        message.encodedValue = input.readBytes();
                        break;
                    case 4:
                        message.feature = input.readString();
                        break;
                    case 5:
                        message.monitoringLabel = input.readString();
                        break;
                    case 6:
                        if(message.uddIds == null)
                            message.uddIds = new ArrayList<Long>();
                        message.uddIds.add(input.readInt64());
                        break;
                    case 7:
                        if(message.deletedUddIds == null)
                            message.deletedUddIds = new ArrayList<Long>();
                        message.deletedUddIds.add(input.readInt64());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, UserSegmentsData message) throws IOException
        {
            if(message.partnerName != null)
                output.writeString(1, message.partnerName, false);

            if(message.taboolaUserId != null)
                output.writeString(2, message.taboolaUserId, false);

            if(message.encodedValue != null)
                output.writeBytes(3, message.encodedValue, false);

            if(message.feature != null)
                output.writeString(4, message.feature, false);

            if(message.monitoringLabel != null)
                output.writeString(5, message.monitoringLabel, false);

            if(message.uddIds != null)
            {
                for(Long uddIds : message.uddIds)
                {
                    if(uddIds != null)
                        output.writeInt64(6, uddIds, true);
                }
            }

            if(message.deletedUddIds != null)
            {
                for(Long deletedUddIds : message.deletedUddIds)
                {
                    if(deletedUddIds != null)
                        output.writeInt64(7, deletedUddIds, true);
                }
            }
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "partnerName";
                case 2: return "taboolaUserId";
                case 3: return "encodedValue";
                case 4: return "feature";
                case 5: return "monitoringLabel";
                case 6: return "uddIds";
                case 7: return "deletedUddIds";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("partnerName", 1);
            fieldMap.put("taboolaUserId", 2);
            fieldMap.put("encodedValue", 3);
            fieldMap.put("feature", 4);
            fieldMap.put("monitoringLabel", 5);
            fieldMap.put("uddIds", 6);
            fieldMap.put("deletedUddIds", 7);
        }
    };
    
}
